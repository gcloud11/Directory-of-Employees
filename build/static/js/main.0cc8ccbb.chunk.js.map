{"version":3,"sources":["utils/API.js","components/SearchBox.js","components/TableData.js","components/Container.js","App.js","service-worker.js","index.js"],"names":["axios","get","SearchBox","props","className","onChange","handleInputChange","value","id","type","name","list","placeholder","onClick","handleSearch","TableData","sortByName","results","map","result","key","login","uuid","src","picture","medium","alt","first","last","cell","href","email","format","dob","date","Container","state","search","employees","filteredEmployees","order","filtereds","sorteds","sort","a","b","console","log","setState","event","UserInput","target","filter","employee","toLowerCase","indexOf","employeeSearch","API","then","res","data","catch","err","preventDefault","alert","includes","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0cc8ccbb.chunk.js","sourcesContent":["import axios from \"axios\";\nexport default {\n    // Gets all users\n    getUsers: function () {\n        return axios.get(\"https://randomuser.me/api/?results=300&nat=us\");\n    }\n};","import React from \"react\"\nimport \"./style.css\";\n\nfunction SearchBox(props) {\n\n    return (\n        <div className=\"container-fluid\">\n\n\n            <header className=\"z-depth-3 col s12\" >\n                <div className=\"row\">\n                    {/* <header className=\" > */}\n\n                    <div className=\"col s6\">\n\n\n\n                        <h3 className=\"right-align headerText\">Associate Directory</h3>\n                        {/* <h6 className=\"center-align smallerHeaderText\">Use the box down below to narrow your search</h6> */}\n\n                    </div>\n                    <div className=\"col s6 \">\n\n                        <div className=\"col s6 inputAndButton right-align \">\n\n                            <input\n                                onChange={props.handleInputChange}\n                                value={props.value}\n                                id=\"employees\"\n                                type=\"text\"\n                                name=\"search\"\n                                list=\"employee\"\n                                className=\" inputBox  \"\n                                placeholder=\"Search by name\" />\n\n\n                        </div>\n                        <div className=\"col m4\">\n\n\n                            <button\n                                type=\"submit\"\n                                value=\"\"\n                                className=\" btn z-depth-2 waves-effect  searchBttn\"\n                                onClick={props.handleSearch} >Search</button>\n                        </div>\n\n\n\n\n\n\n                    </div>\n                    {/* </header > */}\n                </div>\n            </header>\n        </div >\n    )\n}\n\nexport default SearchBox","import React from \"react\";\nimport Moment from 'react-moment';\nimport \"./style.css\";\n\nfunction TableData(props) {\n      return (\n        <table className=\"tableEmployee \">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th onClick={props.sortByName}>Name</th>\n                    <th>Phone</th>\n                    <th>E-mail</th>\n                    <th>DOB</th>\n                </tr>\n            </thead>\n\n            <tbody className= \"\">\n                {props.results.map(result => (\n                    <tr className=\"table\" key={result.login.uuid}>\n                     \n\n                        <td> <img className=\"\n                        \"src={result.picture.medium} alt=\"\" /></td>\n                        \n                        <td>{result.name.first + \" \" + result.name.last}  </td>\n\n                        <td>{result.cell}</td>\n                        <td className=\"email\"><a href={result.email}>{result.email}</a></td>\n                        <td><Moment format=\"MM/DD/YYYY\">{result.dob.date}</Moment></td>\n\n                    </tr>\n                ))}\n            </tbody>\n        </table >\n    )\n\n}\n\nexport default TableData","import API from \"../utils/API\";\nimport React, { Component } from \"react\"\nimport SearchBox from \"./SearchBox\"\n// import SearchBox from \"./SearchBox\"\nimport TableData from \"./TableData\"\nimport \"./style.css\";\n\nclass Container extends Component {\n\n    // Setting the component's initial state\n    //search starts as an empty string\n    //employess and filteredEmployess are empty arrays because that it's the structure of the data we'll be working with\n    //order it's to reference the order that the employees are. By defaltu they come randonly and the first click will trigger then to be in asc order\n    state = {\n        search: \"\",\n        employees: [],\n        filteredEmployees: [],\n        order: \"\"\n\n    };\n\n    // this is the initialization, what do you want the page to display when page it's first loaded\n    componentDidMount() {\n        API.getUsers().then(res => this.setState({\n            employees: res.data.results,\n            filteredEmployees: res.data.results\n        })).catch(err => console.log(err))\n    }\n\n    //if \"name\" it's clicked employee are shown by asc/desc order\n\n    sortByName = () => {\n        const filtereds = this.state.filteredEmployees;\n        if (this.state.order === \"asc\") {\n            const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\n            console.log(sorteds)\n\n            this.setState({\n                filteredEmployees: sorteds,\n                order: \"desc\"\n            })\n        } else {\n\n            const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? -1 : 1)\n            console.log(sorteds)\n\n            this.setState({\n                filteredEmployees: sorteds,\n                order: \"asc\"\n            })\n\n        }\n    }\n    //when input is changing it will dynamically show the associates names that match in the screen\n    handleInputChange = event => {\n\n        const employees = this.state.employees;\n        const UserInput = event.target.value;\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().indexOf(UserInput.toLowerCase()) > -1\n        )\n        this.setState({\n            //change the state of  filteredEmployes now it holds all the employes that matches users\n            // search and will be passed down in this state\n\n            filteredEmployees,\n\n        });\n\n\n    };\n\n\n    //API call triggered when page it's refreshed and  when application it's loaded \n    employeeSearch = () => {\n        API.getUsers()\n            .then(res => this.setState({\n\n                //change their both states to hold all the data from the API call(all employess) and will be passed down trough props like that\n                //employee will remain the same and filteredEmployes will be changed and passed down during application's life. Employee will always hold all employess.\n                filteredEmployees: res.data.results,\n                employees: res.data.results\n            }))\n            .catch(err => console.log(err))\n    }\n\n    //when button search it's clicked\n    handleSearch = event => {\n        event.preventDefault();\n        if (!this.state.search) {\n            alert(\"Enter a name\")\n        }\n        const { employees, search } = this.state;\n\n        //filters the object looking for the value that matches the value entered in the input box by the user  (search.this.state)\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().includes(search.toLowerCase()));\n\n        this.setState({\n            filteredEmployees\n        });\n    }\n\n\n\n    render() {\n\n        return (\n            <div>\n\n                <SearchBox\n                    employee={this.state.employees}\n                    handleSearch={this.handleSearch}\n                    handleInputChange={this.handleInputChange} />\n                <TableData results={this.state.filteredEmployees}\n                    sortByName={this.sortByName}\n\n                />\n            </div >\n\n\n        )\n    }\n}\n\nexport default Container","\nimport React from 'react';\nimport Container from \"./components/Container\"\n\n\nfunction App() {\n  return (\n    <Container />\n\n  )\n}\n\nexport default App;","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n  \n    window.location.hostname === '[::1]' ||\n  \n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost.\n                checkValidServiceWorker(swUrl, config);\n\n\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // not localhost.\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            console.log('Content is cached for offline use.');\n\n                            // callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // This checks if the service worker is found.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // This makes sure service worker exists.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './service-worker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}